																		Numbers
isNumeric()
isNaN(str)
isNaN(n)
isFinite(n)
parseInt (n)
parseFloat(n)
number.toLocaleString()
num.toFixed(precision)

Округление

Math.floor
Math.ceil
Math.round

function isNumeric(n) {
	  return !isNaN(parseFloat(n)) && isFinite(n);

Функция isFinite(n) преобразует аргумент к числу и возвращает true, если это не NaN/Infinity/-Infinity:

Для удобного чтения таких значений существует функция parseInt:
alert( parseInt('12px') ); // 12
Функция parseInt и ее аналог parseFloat преобразуют строку символ за символом, пока это возможно.
Для проверки строки на число можно использовать функцию isNaN(str).
Она преобразует строку в число аналогично +, а затем вернёт true, если это NaN, то есть если преобразование не удалось
Однако, у такой проверки есть две особенности:
1.	Пустая строка и строка из пробельных символов преобразуются к 0, поэтому считаются числами.
2.	Если применить такую проверку не к строке, то могут быть сюрпризы, в частности isNaN посчитает числами значения false, true, null, так как они хотя и не числа, но преобразуются к ним.

Округление битовыми операторами

alert( ~~12.3 ); // 12
Любая побитовая операция такого рода подойдет, например XOR (исключающее ИЛИ, "^") с нулем:
alert( 12.3 ^ 0 ); // 12
alert( 1.2 + 1.3 ^ 0 ); // 2, приоритет ^ меньше, чем +

Округление до заданной точности

alert( Math.round(n * 100) / 100 ); // 3.456 -> 345.6 -> 346 -> 3.46

num.toFixed(precision)
Неточные вычисления


													/**	Объекты как ассоциативные массивы **/
var person = {};

person['name'] = 'Вася';
person.name = 'Vasya';
													
													Удаление осуществляется оператором delete:

delete person.age;
															Перебор
if ("name" in person) {
  alert( "Свойство name существует!" );
}

														2 способа проверки 
														
alert( obj.test === undefined ); // true
alert( "test" in obj );   - лучше 

													/* Объекты: перебор свойств */

for..in

Цикл по ключам: for (key in obj).
Порядок перебора соответствует порядку объявления для нечисловых ключей, а числовые – сортируются (в современных браузерах).
Если нужно, чтобы порядок перебора числовых ключей соответствовал их объявлению в объекте, то используют трюк: числовые ключи заменяют на похожие, но содержащие не только цифры. Например, добавляют в начало +, как описано в примере выше, а потом, в процессе обработки, преобразуют такие ключи в числа.
var codes = {
  "+7": "Россия",
  "+38": "Украина",
  "+1": "США"
};

for (var code in codes) {
  var value = codes[code];
  code = +code; // ..если нам нужно именно число, преобразуем: "+7" -> 7

  alert( code + ": " + value ); // 7, 38, 1 во всех браузерах
}

legth  - Object.keys(object).length

Объект присваивается и копируется «по ссылке». То есть, в переменной хранится не сам объект а, условно говоря, адрес в памяти, где он находится.
Если переменная-объект скопирована или передана в функцию, то копируется именно эта ссылка, а объект остаётся один в памяти.
Это – одно из ключевых отличий объекта от примитива (числа, строки…), который при присвоении как раз копируется «по значению», то есть полностью.

													/* Массивы с числовыми индексами */
													
	var arr = [];
	Методы push/pop выполняются быстро, а shift/unshift – медленно.
	Stack and Queue
	
	Find element - indexOf()
	split(s)  позволяет превратить строку в массив, разбив ее по разделителю s.
	alert( "a,b,c,d".split(',', 2) ); // a,b
	join() Вызов arr.join(str) делает в точности противоположное split. Он берет массив и склеивает его в строку, используя str как разделитель.

new Array + join = Повторение строки
slice()
sort()
reverse()

concat() Метод arr.concat(value1, value2, … valueN) создаёт новый массив, в который копируются элементы из arr, а также value1, value2, ... valueN.

indexOf/lastIndexOf

Object.keys(obj)
Ранее мы говорили о том, что свойства объекта можно перебрать в цикле for..in.
Если мы хотим работать с ними в виде массива, то к нашим услугам – замечательный метод Object.keys(obj). Он поддерживается везде, кроме IE8-

push/pop, shift/unshift, splice – для добавления и удаления элементов.
join/split – для преобразования строки в массив и обратно.
slice – копирует участок массива.
sort – для сортировки массива. Если не передать функцию сравнения – сортирует элементы как строки.
reverse – меняет порядок элементов на обратный.
concat – объединяет массивы.
indexOf/lastIndexOf – возвращают позицию элемента в массиве (не поддерживается в IE8-).
Дополнительно:

Object.keys(arr) возвращает массив свойств объекта.

Разбивка по буквам
Вызов split с пустой строкой разобьёт по буквам:

 var str = "тест";

alert( str.split('') ); // т,е,с,т
